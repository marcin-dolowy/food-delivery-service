/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.epam.training.fooddelivery.api;

import com.epam.training.fooddelivery.model.CartModel;
import com.epam.training.fooddelivery.model.OrderModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-27T14:59:06.725885800+02:00[Europe/Warsaw]")
@Validated
@Api(value = "orderservice", description = "the orderservice API")
public interface OrderserviceApi {

    /**
     * POST /orderservice/orders : Create order from the cart of body
     * creates order from cart&#39;s body
     *
     * @param cartModel Cart to place an order (required)
     * @return Created order (status code 201)
     *         or The Cart is empty (status code 400)
     */
    @ApiOperation(value = "Create order from the cart of body", nickname = "createOrder", notes = "creates order from cart's body", response = OrderModel.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created order", response = OrderModel.class),
        @ApiResponse(code = 400, message = "The Cart is empty") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orderservice/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderModel> createOrder(@ApiParam(value = "Cart to place an order", required = true) @Valid @RequestBody CartModel cartModel);


    /**
     * GET /orderservice/orders/{id} : Get order of authenticated customer by orderId
     * get order with given id
     *
     * @param id id (required)
     * @return Order with given ID (status code 200)
     *         or the order exists but does not belong to the authenticated customer (status code 403)
     *         or the order does not exist (status code 404)
     */
    @ApiOperation(value = "Get order of authenticated customer by orderId", nickname = "getOrderById", notes = "get order with given id", response = OrderModel.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order with given ID", response = OrderModel.class),
        @ApiResponse(code = 403, message = "the order exists but does not belong to the authenticated customer"),
        @ApiResponse(code = 404, message = "the order does not exist") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderModel> getOrderById(@ApiParam(value = "id", required = true) @PathVariable("id") Long id);


    /**
     * GET /orderservice/orders : List orders of authenticated customer
     * List all orders of authenticated customer
     *
     * @return Customer&#39;s orders (status code 200)
     */
    @ApiOperation(value = "List orders of authenticated customer", nickname = "listAllOrders", notes = "List all orders of authenticated customer", response = OrderModel.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer's orders", response = OrderModel.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderModel>> listAllOrders();

}
